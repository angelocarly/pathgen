#version 450

layout ( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;
layout( std430, binding = 1 ) buffer indices
{
    int idata[];
};
layout( std430, binding = 2 ) buffer vertices
{
    vec4 vdata[];
};
layout( push_constant ) uniform PushConstants
{
    mat4 transform;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
    vec3 pa = p - a, ba = b - a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h ) - r;
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec2 pos = vec2( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ) ) - 0.5f;

    vec3 color = vec3( 0 );

    for( int i = 0; i < 41; i++ )
    {
        vec2 p1 = ( constants.transform * vec4( vdata[idata[i * 2 + 0]]) ).xy;
        vec2 p2 = ( constants.transform * vec4( vdata[idata[i * 2 + 1]]) ).xy;
        if( sdCapsule(vec3(pos, 0), vec3(p1, 0 ), vec3(p2, 0 ), .01f) < .0) {
            color = vec3( 1 );
        }
    }

    imageStore( image, p, vec4( color, 1 ) );
}