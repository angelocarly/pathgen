#version 450

layout ( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;
layout( std430, binding = 1 ) buffer indices
{
    int idata[];
};
layout( std430, binding = 2 ) buffer vertices
{
    vec4 vdata[];
};
layout( push_constant ) uniform PushConstants
{
    mat4 transform;
    int edge_count;
    float time;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
    vec3 pa = p - a, ba = b - a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h ) - r;
}

void dda_line( ivec2 p0, ivec2 p1, vec4 color )
{
    ivec2 delta = abs( p1 - p0 );
    ivec2 step = ivec2( sign( p1.x - p0.x ), sign( p1.y - p0.y ) );
    ivec2 offset = delta / 2;
    ivec2 p = p0;
    ivec2 end = p1;
    if( delta.x >= delta.y )
    {
        for( int i = 0; i < delta.x; i++ )
        {
            imageStore( image, p, color );
            offset.y += delta.y;
            if( offset.y >= delta.x )
            {
                offset.y -= delta.x;
                p.y += step.y;
            }
            p.x += step.x;
        }
    }
    else
    {
        for( int i = 0; i < delta.y; i++ )
        {
            imageStore( image, p, color );
            offset.x += delta.x;
            if( offset.x >= delta.y )
            {
                offset.x -= delta.y;
                p.x += step.x;
            }
            p.y += step.y;
        }
    }
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );

    // Only process one edge per core
    if( p.x >= constants.edge_count || p.y > 0 ) return;

    int i = p.x;
    vec3 p1 = ( constants.transform * vec4( vdata[idata[i * 2 + 0]]) ).xyz;
    vec3 p2 = ( constants.transform * vec4( vdata[idata[i * 2 + 1]]) ).xyz;

    vec2 s1 = vec2( ( p1.x + .5f ) * screenSize.x, ( p1.y + .5f ) * screenSize.y);
    vec2 s2 = vec2( ( p2.x + .5f ) * screenSize.x, ( p2.y + .5f ) * screenSize.y);

    dda_line(ivec2(s1), ivec2(s2), vec4( palette(p1.z, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3( 1.0, 1.0, 1.0),vec3(0.00, 0.33, 0.67)), 1));
//
//    vec2 pos = vec2( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ) ) - 0.5f;
//
//    vec3 color = vec3( 0 );
//
//    bool hit = false;
//    for( int i = 0; i < constants.edge_count; i++ )
//    {
//        vec2 p1 = ( constants.transform * vec4( vdata[idata[i * 2 + 0]]) ).xy;
//        vec2 p2 = ( constants.transform * vec4( vdata[idata[i * 2 + 1]]) ).xy;
//        float d = sdCapsule(vec3(pos, 0), vec3(p1, 0 ), vec3(p2, 0 ), .001f);
//        if( d < .004 ) { hit = true; break; }
//    }
//
//    color = vec3( hit );
//
//    imageStore( image, p, vec4( color, 1 ) );
}